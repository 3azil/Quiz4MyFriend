import { useState } from "react";
import Card from "./components/ui/card";
import Input from "./components/ui/input";
import Button from "./components/ui/button.js";
import Progress from "./components/ui/progress.js";


const riddles = [
  { question: "–ü—Ä–æ–¥–æ–ª–∂–∏ —Ç–µ—Ä–º–∏–Ω 'Ebanko' ?", answer: "racing" },
  {
    question:
      "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —É–¥–∞—Ä, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º—è—á –≤ –Ω–∏–∑–∫—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã —Ç–æ—Ç –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–ª —Å–µ—Ç–∫—É?",
    answer: "–ø–æ–¥—Å–µ—á–∫–∞",
  },
  { question: "–ß—Ç–æ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –û—Ñ—Ñ–†–æ—É–¥–∞ ?", answer: "–∫–∞—Ä—à–µ—Ä–∏–Ω–≥" },
  {
    question: "–ö–∞–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è '–†–¢–¢' ?",
    answer: "—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π —Ç—É—Ä",
  },
  { question: "–ß—Ç–æ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥ –Ω–∞–º–∏, –Ω–æ –º—ã –µ–≥–æ –Ω–µ –≤–∏–¥–∏–º?", answer: "–±—É–¥—É—â–µ–µ" },
];

export default function RiddleApp() {
  const [step, setStep] = useState(0);
  const [answers, setAnswers] = useState(Array(riddles.length).fill(""));

  const isAnswerCorrect =
    step > 0 && answers[step - 1] === riddles[step - 1]?.answer;

  const handleChange = (value) => {
    const newAnswers = [...answers];
    newAnswers[step - 1] = value.toLowerCase();
    setAnswers(newAnswers);
  };

  const nextStep = () => {
    if (isAnswerCorrect) {
      setStep(step + 1);
    }
  };

  return (
    <div className="card-container">
      <div className="card">
        {step === 0 ? (
          <div className="card-content">
            <h1>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –¢–µ–±—è —Å –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è!</h1>
            <p>–ñ–µ–ª–∞—é —Å—á–∞—Å—Ç—å—è, —Ä–∞–¥–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—Ö–æ–≤ –≤–æ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö!</p>
            <p>–ü–æ–±–æ–ª—å—à–µ –¥–µ–Ω—è–≥, –ø–æ–º–µ–Ω—å—à–µ –ø—Ä–æ–±–ª–µ–º –∏ –∑–∞–±–æ—Ç!</p>
            <p>–£—Å–ø–µ—Ö–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ, –õ—é–±–≤–∏ –∏ –°–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ:</p>
            <h1>–°–∏–ª—å–Ω—ã—Ö –õ—é–¥–µ–π –†—è–¥–æ–º</h1>
            <h3>‚ù§Ô∏è‚Äçüî•</h3>
            <button className="button" onClick={() => setStep(1)}>
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            </button>
          </div>
        ) : step <= riddles.length ? (
          <div className="card-content">
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä: –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ ((step - 1) / total) * 100 */}
            <Progress value={((step - 1) / riddles.length) * 100} />
            <p>{riddles[step - 1]?.question}</p>
            <input
              className="input-field"
              value={answers[step - 1]}
              onChange={(e) => handleChange(e.target.value)}
            />
            <button
              className="button"
              onClick={nextStep}
              disabled={!isAnswerCorrect}
            >
              –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–µ
            </button>
          </div>
        ) : (
          <div className="card-content">
            <h1>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</h1>
            <p>–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏!</p>
            <p>–í–æ—Ç —Ç–≤–æ–π –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –ø—Ä–∏–∑</p>
            <p> ‚ãÜ‚ú¥Ô∏éÀöÔΩ°‚ãÜ‚ãÜ‚ú¥Ô∏éÀöÔΩ°‚ãÜ‚ãÜ‚ú¥Ô∏éÀöÔΩ°‚ãÜ </p>
            <a
              href={`${process.env.PUBLIC_URL}/certificate.jpg`}
              download="certificate.jpg"
            >
              <button className="button">–ü–æ–ª—É—á–∏—Ç—å –ü—Ä–∏–∑</button>
            </a>
          </div>
        )}
      </div>
      <footer className="footer">
        <p>by 3azil</p>
      </footer>
    </div>
  );
}
